### PropKB
kb = PropKB()
kb.tell(A & B)
kb.tell(B >> C)
kb.ask(C) ## The result {} means true, with no substitutions

kb.ask(P) 

kb.retract(B)
kb.ask(C) 


pl_true(P, {}) 
pl_true(P | Q, {P: True}) 


# Notice that the function pl_true cannot reason by cases:
pl_true(P | ~P) 

# However, tt_true can:
tt_true(P | ~P) 


# The following are tautologies from [Fig. 7.11]:
tt_true("(A & B) <=> (B & A)") 

tt_true("(A | B) <=> (B | A)") 

tt_true("((A & B) & C) <=> (A & (B & C))") 

tt_true("((A | B) | C) <=> (A | (B | C))") 

tt_true("~~A <=> A") 

tt_true("(A >> B) <=> (~B >> ~A)") 

tt_true("(A >> B) <=> (~A | B)") 

tt_true("(A <=> B) <=> ((A >> B) & (B >> A))") 

tt_true("~(A & B) <=> (~A | ~B)") 

tt_true("~(A | B) <=> (~A & ~B)") 

tt_true("(A & (B | C)) <=> ((A & B) | (A & C))") 

tt_true("(A | (B & C)) <=> ((A | B) & (A | C))") 


# The following are not tautologies:
tt_true(A & ~A) 

tt_true(A & B) 


### [Fig. 7.13]
alpha = expr("~P12")
to_cnf(Fig[7,13] & ~alpha)
#((~P12 | B11) & (~P21 | B11) & (P12 | P21 | ~B11) & ~B11 & P12)
tt_entails(Fig[7,13], alpha) 

pl_resolution(PropKB(Fig[7,13]), alpha) 


### [Fig. 7.15]
pl_fc_entails(Fig[7,15], expr('SomethingSilly')) 


### Unification:
unify(x, x, {}) 

unify(x, 3, {}) 



to_cnf((P&Q) | (~P & ~Q)) 
#((~P | P) & (~Q | P) & (~P | Q) & (~Q | Q))

